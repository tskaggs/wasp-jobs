app jobs {
  wasp: {
    version: "^0.7.1"
  },
  title: "Wasp Jobs",
  head: [
    "<meta name=\"description\" content=\"A Job site for Wasp Lang.\">"
  ],

  auth: {
    // Expects entity User to have (username:String) and (password:String) fields.
    userEntity: User,
    methods: {
      // We also support Google, with more on the way!
      usernameAndPassword: {}
    },
    // We'll see how this is used a bit later
    onAuthFailedRedirectTo: "/login"
  },

  dependencies: [
    ("@tailwindcss/forms", "^0.5.3"),
    ("@tailwindcss/typography", "^0.5.7"),
    ("@headlessui/react", "^1.7.4"),
    ("@heroicons/react", "^2.0.13")
  ]
}

entity User {=psl
    id          Int     @id @default(autoincrement())
    name        String
    email       String  @unique
    username    String  @unique
    password    String
    company     Company?
    tasks       Task[]
psl=}

entity Company {=psl
    id          Int     @id @default(autoincrement())
    name        String
    description String
    website     String
    user        User    @relation(fields: [userId], references: [id])
    userId      Int     @unique
    jobs        Job[]
psl=}

entity Job {=psl
    id          Int     @id @default(autoincrement())
    title       String
    description String
    duration    String
    link        String
    contract    Boolean
    compensation String
    equity      String
    location    String
    benefits    Boolean
    mvp         Boolean
    published   Boolean    @default(false)
    publishedAt DateTime?
    closingAt   DateTime?
    createdAt   DateTime   @default(now())
    company     Company    @relation(fields: [companyId], references: [id])
    companyId   Int
psl=}

entity Task {=psl
    id          Int     @id @default(autoincrement())
    description String
    isDone      Boolean @default(false)
    user        User    @relation(fields: [userId], references: [id])
    userId      Int
psl=}

route RootRoute { path: "/", to: PublicPage }
page PublicPage {
  component: import Public from "@client/PublicPage"
}

route MainRoute { path: "/dashboard", to: MainPage }
page MainPage {
  authRequired: true,
  component: import Main from "@client/MainPage"
}
route ManageCompanyRoute { path: "/managecompany", to: ManageCompanyPage }
page ManageCompanyPage {
  authRequired: true,
  component: import ManageCompanyPage from "@client/company/ManageCompanyPage"
}
route ManageJobRoute { path: "/managejob", to: ManageJobPage }
page ManageJobPage {
  authRequired: true,
  component: import ManageJobPage from "@client/jobs/ManageJobPage"
}

route SuccessRoute { path: "/success", to: SuccessPage }
page SuccessPage {
  authRequired: true,
  component: import SuccessPage from "@client/components/SuccessPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/auth/SignupPage"
}
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/auth/LoginPage"
}

query getCompany {
  fn: import { getCompany } from "@server/queries.js",
  entities: [Company]
}
action createCompany {
  fn: import { createCompany } from "@server/actions.js",
  entities: [Company]
}
action updateCompany {
  fn: import { updateCompany } from "@server/actions.js",
  entities: [Company]
}

query getJobs {
  fn: import { getJobs } from "@server/queries.js",
  entities: [Job]
}
action createJob {
  fn: import { createJob } from "@server/actions.js",
  entities: [Job]
}
action updateJob {
  fn: import { updateJob } from "@server/actions.js",
  entities: [Job]
}
action publishJob {
  fn: import { publishJob } from "@server/actions.js",
  entities: [Job]
}
query getJob {
  fn: import { getJob } from "@server/queries.js",
  entities: [Job]
}
