app jobs {
  wasp: {
    version: "^0.7.1"
  },
  title: "Wasp Jobs",

  auth: {
    // Expects entity User to have (username:String) and (password:String) fields.
    userEntity: User,
    methods: {
      // We also support Google, with more on the way!
      usernameAndPassword: {}
    },
    // We'll see how this is used a bit later
    onAuthFailedRedirectTo: "/login"
  },

  dependencies: [
    ("react-clock", "3.0.0")
  ]
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  authRequired: true,
  component: import Main from "@client/MainPage"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/SignupPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/LoginPage"
}

// ...

entity Task {=psl
    id          Int     @id @default(autoincrement())
    description String
    isDone      Boolean @default(false)
    user        User?    @relation(fields: [userId], references: [id])
    userId      Int?
psl=}

// ...

query getTasks {
  // We specify that JS implementation of the query (which is an async JS function)
  // can be found in `src/server/queries.js` as the named export `getTasks`.
  // Use '@server' to reference files inside the src/server folder.
  fn: import { getTasks } from "@server/queries.js",
  // We tell Wasp that this query is doing something with entity `Task`. With that, Wasp will
  // automatically refresh the results of this query when tasks change.
  entities: [Task]
}

// ...

action createTask {
  fn: import { createTask } from "@server/actions.js",
  entities: [Task]
}

// ...

action updateTask {
  fn: import { updateTask } from "@server/actions.js",
  entities: [Task]
}

// ...

entity User {=psl
    id          Int     @id @default(autoincrement())
    username    String  @unique
    password    String
    tasks       Task[]
psl=}